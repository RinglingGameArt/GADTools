"""
JWHamer UDK Scale tool!
Will scale size of selection on X, Y, or Z axis. Ballin'.
"""

import maya.cmds as cmds
import logging
global sg1
global sg2
global sg3
global selection

def UDKScaleUI():  
    window_name = "UDKScaleTool"
    #builds the window    
    if cmds.window(window_name, q=True, exists=True):
        cmds.deleteUI(window_name)
        
    my_window = cmds.window(window_name, title = "UDK Scale Tool", s=False, widthHeight =(300,150))
    #constructs the layout of said window
    cmds.columnLayout(adj = True)
    cmds.floatFieldGrp("scaleX", numberOfFields=1, label = "Desired Size in UDK:", el= "ft", precision = 2)
    cmds.text(label = '\n This tool will scale your object by X, Y, or Z in a uniform manner. \n', align = 'center')
    cmds.button(label='Scale by X', command=scalebyX)
    cmds.button(label='Scale by Y', command=scalebyY)
    cmds.button(label='Scale by Z', command=scalebyZ)
    cmds.showWindow(my_window)

def scalebyX(*args):
    sg1 = cmds.floatFieldGrp("scaleX", query=True, value=True)[0]
    #error checking to make sure the grid is the right size
    spacing = cmds.grid(query=True, spacing=True)
    if spacing != 16:
        cmds.warning("Grid is wrong size. Please set spacing to 16.")
    #error checking to make sure something is selected
    selection = cmds.ls(sl=True)
    if not selection:
        logging.error("Please select something!")
        return
    #get size of selection 
    xmin, ymin, zmin, xmax, ymax, zmax = cmds.xform(selection[0], q=True, ws=True, bb=True)
    width = abs(xmax - xmin)
    #figure out how much the selection needs to be scaled by
    w = width / 16
    y = sg1 / w
    #scale selection and delete previous history
    cmds.scale(y, y, y, selection, absolute = True)
    cmds.makeIdentity(apply=True, t=1, r=1, s=1, n=0)
    
def scalebyY(*args):
    sg2 = cmds.floatFieldGrp("scaleX", query=True, value=True)[0]
    #error checking to make sure the grid is the right size
    spacing = cmds.grid(query=True, spacing=True)
    if spacing != 16:
        cmds.warning("Grid is wrong size. Please set spacing to 16.")
    #error checking to make sure something is selected
    selection = cmds.ls(sl=True)
    if not selection:
        logging.error("Please select something!")
        return
    #get size of selection 
    xmin, ymin, zmin, xmax, ymax, zmax = cmds.xform(selection[0], q=True, ws=True, bb=True)
    depth = abs(ymax - ymin)
    #figure out how much the selection needs to be scaled by
    w = depth / 16
    y = sg2 / w
    #scale selection and delete previous history
    cmds.scale(y, y, y, selection, absolute = True)
    cmds.makeIdentity(apply=True, t=1, r=1, s=1, n=0)
    
def scalebyZ(*args):
    sg3 = cmds.floatFieldGrp("scaleX", query=True, value=True)[0]
    #error checking to make sure the grid is the right size
    spacing = cmds.grid(query=True, spacing=True)
    if spacing != 16:
        cmds.warning("Grid is wrong size. Please set spacing to 16.")
    #error checking to make sure something is selected
    selection = cmds.ls(sl=True)
    if not selection:
        logging.error("Please select something!")
        return
    #get size of selection 
    xmin, ymin, zmin, xmax, ymax, zmax = cmds.xform(selection[0], q=True, ws=True, bb=True)
    height = abs(zmax - zmin)
    #figure out how much the selection needs to be scaled by
    w = height / 16
    y = sg3 / w
    #scale selection and delete previous history
    cmds.scale(y, y, y, selection, absolute = True)
    cmds.makeIdentity(apply=True, t=1, r=1, s=1, n=0)

UDKScaleUI()
