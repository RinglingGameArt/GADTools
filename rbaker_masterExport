
'''Ryan Baker's Tool'''

#clean combine needs multiple objects selected

#prepares mesh to be exported
import maya.cmds as cmds


def MasterExportToolUI(): 
        
    # define name of window
    window_name = "Master Export Tool!"
    
    # checks for duplicates/window alreadye exists? 
    if cmds.window(window_name, q=True, exists=True):
        cmds.deleteUI(window_name)
        
    # create new window
    my_window = cmds.window(window_name, title="Master Eport Tool")
    cmds.columnLayout(adj=True)
    #create buttons for each aspect of tool
    cmds.button(c=cleancombine, l="CleanCombine")
    cmds.button(c=centerpivot, l="CenterPivot")
    cmds.button(c=normals, l="normals")
    cmds.button(c=deletetransforms, l="freezeTransforms")
    cmds.button(c=deletehistory, l="deleteHistory")
   
   
    # column layout
    my_layout = cmds.columnLayout(parent=my_window, adj=True)
    
    
   # generate the window
    cmds.showWindow(my_window)

#when pushed, button executes these

''' CleanCombine''' 
def cleancombine(*args):
    print "cleancombine"
    #grab your selection
    selection = cmds.ls(sl=True)
    
    #first or last object?
    first_object = selection[0]
    
    #gather information
    pivot = cmds.xform(first_object, q=True, worldSpace=True, rotatePivot=True)
    display_layers = cmds.listConnections(first_object, type="displayLayers")
    print display_layers
    
    #combine without history
    new_mesh = cmds.polyUnite(ch=False)
    
    cmds.xform(new_mesh, rotatePivot=pivot)
    if display_layers:
        cmds.editDisplayLayerMembers(display_layers[0], new_mesh)
        
    #rename 
    cmds.rename(new_mesh, first_object)


'''CenterPivot'''
def centerpivot(*args):
    print "centerpivot"
    cmds.xform(cp=True)

'''Normals'''
def normals(*args):
    print "normal's conformed, set, and locked"
    #conform,set, and lock normals
    selection = cmds.ls(sl=True)
    for selected in selection:
        
        cmds.ConformPolygonNormals(selected)
        cmds.SetToFaceNormals(selected)
        cmds.polyNormalPerVertex(selected, fn=True)
    
    
''' Transforms ''' 
def deletetransforms(*args):
    print "transforms frozen"
    #freeze transforms
    cmds.makeIdentity(apply=True, t=1, r=1, s=1, n=0)

''' history ''' 
#delete history
def deletehistory(*args):
    print "history Deleted"
    cmds.delete(all=True, constructionHistory=True)
    
    
  

MasterExportToolUI()    








