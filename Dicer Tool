# Final Dicer working atm


import maya.cmds as cmds
def createUI( pWindowTitle, pApplyCallback ):
    
    windowID = 'myWindowID'
    
    if cmds.window( windowID, exists=True ):
        cmds.deleteUI( windowID )
        
     
    cmds.window( windowID, width=100, height=1000, mxb=False, title=pWindowTitle, sizeable=True, resizeToFitChildren=True )

    cmds.rowColumnLayout( numberOfColumns=3, columnWidth=[ (1,200), (2,200) ] )
    
  #  cmds.select(obj=True)
    

    
    
   #///////////////////////
#       Next Row                        Set Mesh
#///////////////////////
    cmds.button(label="Select Mesh",bgc = (.93906,.86328,.39844), command = checkMesh)
    cmds.button(label="Confirm Mesh",bgc = (.896, .66172, .0546875), command = confirmMesh)
#cmds.separator(h=5, style="none")            #spaces menu 10 pxls

#///////////////////////
#       Next Row                        Rotation
#///////////////////////
    cmds.button(label="Set Rotation",bgc = (.88672, .65625, .386712875),  command = selectRotation)
    cmds.button(label="Confirm Rotation",bgc = (.9140625, .375, .1875), command = confirmRotation)
#cmds.separator(h=5, style="none")            #spaces menu 10 pxls

#///////////////////////
#       Next Row                        Number of Cuts just a value box
#///////////////////////

#create the quantity field
#cmds.text(label="Number of Cuts")
#cmds.intField(min=1, max=100)                 #only allows user to enter numbers from 1-100
#cmds.separator(h=5, style="none")            #spaces menu 10 pxls

#///////////////////////
#       Next Row                        Number of Cuts slider with box  .996, .76172, .0546875
#///////////////////////
#F = cmds.floatSliderGrp (field=True, minValue=1 , maxValue=100)
#cmds.text(label="Number of Cuts")
#F = cmds.intSliderGrp(field=True, minValue=1, maxValue=100, fieldMinValue=1, fieldMaxValue=100, value=1)    # DISABLED THIS, RENABLE IF OTHER DOESNT WORK



#fieldOne = cmds.intField('super',q=True, v = True)
#testSlider = cmds.intField(query=True, minValue=1, maxValue=100, v=True, step=10 )
#cutNumber = cmds.intField('cuts', q=True, v=True)

#cmds.separator(h=5, style="none")
#cuts = cmds.intSliderGrp(field=True, fieldStep=2, query=True, value=True)
    cmds.text(label="Slices:")
    cmds.intField( "FFF", label='intField',width=200, field=True, cc=intChecker)     #this is the field that lets users type in numbers to cut the mesh


    cmds.button( label='RESET', bgc=(.5,.2,.2), command = resetIt )
    cmds.button( label='ENTER', bgc=(.3,.5,.2), command=intChecker)
    

    if cmds.window( windowID, exists=True ):
        cmds.deleteUI( windowID )
#/////////////////////////////////////////////////////
#                    Check Mesh
#/////////////////////////////////////////////////////
def checkMesh(*pArgs):
    cmds.xform(cp=1)
    cmds.move(0, 0, 0)(*pArgs)
#/////////////////////////////////////////////////////
#                    Confirm Mesh
#/////////////////////////////////////////////////////
def confirmMesh(*args):
    cmds.duplicate(n='YYY')
    cmds.select('YYY*')
    cmds.xform(cp=1)
    cmds.move( 0, 0, 0 )(*args)
#/////////////////////////////////////////////////////
#             Create Plane For Rotation
#/////////////////////////////////////////////////////
def selectRotation(*args):
    cmds.polyPlane( n='XXX', sx=1, sy=1, w=10, h=10, ax=(0, 0, 1))
#/////////////////////////////////////////////////////
#               Confirm Plane Rotation
#/////////////////////////////////////////////////////
def confirmRotation(*args):
    rX = cmds.getAttr("XXX.rotateX")
    rY = cmds.getAttr("XXX.rotateY")
    rZ = cmds.getAttr("XXX.rotateZ")
    print rX, rY, rZ (*args)    
    cmds.rotate('YYY',r= (-rX, -rY,-rZ))
#/////////////////////////////////////////////////////
#                       RESET
#/////////////////////////////////////////////////////    
def resetIt(pArgs):
    cmds.delete('YYY*')
    cmds.delete('XXX*')

    cmds.showWindow() 
cmds.keyTangent( inTangentType='linear', outTangentType='linear' )    
#//////////////////////////////////////////////
#                    FINAL
#//////////////////////////////////////////////
def intChecker(*pArgs):
    FFFvalue = cmds.intField( "FFF",query=True, value=True)
    print FFFvalue      
    (x[4] - x[5])/abs(abs(FFFvalue) + (FFFvalue/FFFvalue))
    cmds.select('XXX*')
    cmds.move(0, 0, 0)
    cmds.duplicate(smartTransform)
    cmds.polyUnite('XXX*')
    cmds.xform(cp=1)
    cmds.polyCBoolOp( 'YYY', 'ZZZ', op=2)
    
    cmds.createUI( 'Volpas Tool', applyCallback )   
